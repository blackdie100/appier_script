from pymongo import MongoClient
import os
import sys
import json
import time
import pandas
import requests
import base64
import pandas
from datetime import datetime, timedelta
from argparse import ArgumentParser
from bson import Int64, ObjectId

if __name__ == '__main__':

    # basic config of script including app ID and emails to send
    parser = ArgumentParser(
    usage="python3 send_android_push.py --app-id/-a <app_id> --email/-e <email a> --email/-e <email b> (-d)",
    description="This program will send a email consisting of in-web lead")
    parser.add_argument("--app-id", "-a", dest="app_id", help="clinet's app ID", required=True)
    parser.add_argument("--email", "-e", dest="emails", help="the email you want to send to", action='append', type=str, required=True)
    parser.add_argument("--difference", "-d", dest="diff", help="(optional) if you set this up, report will only contain the lead today (otherwise, it will be 7 days data)", action="store_true")
    args = parser.parse_args()
    app_id = args.app_id
    emails = [{"email": e} for e in args.emails]
    scriptDirectory = os.path.dirname(os.path.realpath(__file__))

    db = app_id + "_web"
    print(datetime.now())
    yesterday = datetime.now() - timedelta(days=1)
    date_objectId = ObjectId.from_datetime(datetime(yesterday.year, yesterday.month, yesterday.day))

    client = MongoClient('mongo-0.qgraph-vpc.io:27000')
    events = client[db]['events']
    profiles = client[db]['profiles']
    users = []
    
    # get the lead gen event in recent 7 days
    if args.diff:
        freq = '_每日'
        result = events.find({"eventName": "qg_inweb_lead_gen", "_id": {"$gt": date_objectId}})
    else:
        freq = '_每週'
        result = events.find({"eventName": "qg_inweb_lead_gen"})

    # get the profile data
    for e in result:
        projection = {k: 1 for k in e['parameters']['leadKeys']}
        projection['_id'] = 0
        user = profiles.find_one({"userId": Int64(e['userId'])}, projection)
        user['campaign ID'] = e['parameters']['notificationId'] / 1000
        user['submit time'] = e['_id'].generation_time.strftime("%Y-%m-%d %H:%M:%S")
        users.append(user)
    

    df = pandas.DataFrame(users)
    
    fileName = scriptDirectory + '/reports/' + datetime.now().strftime('%Y%m%d') + freq +'報表.xlsx'
    df.to_excel(fileName, index = False)
    
    # send the email
    sg_header = {
        'Authorization': 'Bearer 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',
        'Content-Type': 'application/json'
    }

    sg_url = 'https://api.sendgrid.com/v3/mail/send'

    with open(fileName, 'rb') as f:
        data = f.read()

    attachment = base64.b64encode(data)
    base64_string = attachment.decode('utf-8')

    content = {
        "personalizations": [
            {
                "to": emails,
                "subject": "InWeb Campaign" + freq +"報表"
            }
        ],
        "from": {
            "email": "info@marketing.appier.com"
        },
        "content": [
            {
                "type": "text/html",
                "value": "Please refer to the attachment for the lead info generated by AIQUA in-web from 8AM yesterday to 8AM this morning"
            }
        ],
        "attachments": [
            {
                "filename": datetime.now().strftime('%Y%m%d') + freq +'報表.xlsx',
                "content": base64_string
            }
        ]
    }

    sg_r = requests.post(sg_url, headers=sg_header, data=json.dumps(content))
    print(sg_r.text)

